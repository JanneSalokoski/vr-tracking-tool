{"version":3,"sources":["store.js","API/API.js","UI/Components/Header/Header.js","UI/Components/TrainView/TrainItem.js","UI/Components/Components.js","UI/Components/TrainView/TrainView.js","VrTrackingTool.js","serviceWorker.js","index.js"],"names":["initialState","connected","trains","stations","meta","majorVersion","minorVersion","releaseType","reducer","state","action","newState","type","console","log","trainObject","trainName","train","currentStation","data","station","Error","store","createContext","Provider","axios","require","default","MQTT","TimeTableEvent","this","scheduledTime","liveEstimateTime","TimeTableRow","arrival","departure","stationShortCode","commercialStop","commercialTrack","differenceInMinutes","Train","trainNumber","trainType","runningCurrently","timeTableRows","getTimeTableRowObjects","fromStation","toStation","length","elementStatus","reduce","result","value","index","array","push","map","row","API","getData","endpoint","callback","a","async","get","response","getTrains","train_number","departure_date","version","getTracking","client","Client","topics","success","res","failure","err","connectionLost","messageArrived","msg","parseTopic","topic","split","messageTopic","subscription","topic_b","subscriptionTopic","level","level_a","level_b","every","item","connect","timeout","keepAliveInterval","useSSL","onSuccess","onFailure","onConnectionLost","onMessageArrived","error","subscribeToTopic","subscribe","disconnect","subscribeToTrainUpdates","Header","props","applicationState","useContext","dispatch","className","href","formatTime","date","dateFormat","TrainItem","key","getTimeTableRow","Components","TrainView","identifier","placeholder","onChange","event","target","onClick","tracking","newTrainObject","JSON","parse","payloadString","trainItemElements","createTrainItemElements","VrTrackingTool","connect_application","isConnected","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","children","useReducer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09685a21.chunk.js","sourcesContent":["import React, {createContext, useReducer} from 'react';\n\nconst initialState = {\n  connected: false,\n  trains: {},\n  stations: {},\n  meta: {\n    majorVersion: 0,\n    minorVersion: 1,\n    releaseType: \"Alpha\",\n  }\n};\n\nconst reducer = (state, action) => {\n  const newState = {...state}\n  switch (action.type) {\n    case 'CONNECTION_SUCCESFULL':\n      console.log(\"Connected\");\n      newState.connected = true;\n      return newState;\n    case 'CONNECTION_FAILED':\n      newState.connected = false;\n      return newState;\n    case 'DISCONNECTED':\n      newState.connected = false;\n      return newState;\n    case 'CREATE_TRAIN':\n      newState.trains[action.trainObject.trainName] = action.trainObject;\n      return newState;\n    case 'UPDATE_TRAIN':\n      newState.trains[action.trainObject.trainName] = action.trainObject;\n      return newState;\n    case 'TRACKING':\n      newState.trains[action.train].currentStation = action.data.station;\n      return newState;\n    default:\n      throw new Error();\n  }\n}\n\nconst store = createContext(initialState);\nconst {Provider} = store;\n\nconst DispatchProvider = ({children}) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (<Provider value={{state, dispatch}}>{children}</Provider>);\n}\n\nexport {store, DispatchProvider};\n","const axios = require(\"axios\").default; // Enables autocomplete!\n//const url = require('url');\n//const MQTT = require(\"async-mqtt\");\n\nconst MQTT = require(\"paho-mqtt\");\n\nclass TimeTableEvent {\n  constructor(data) {\n    this.scheduledTime = data.scheduledTime;\n    this.liveEstimateTime = data.liveEstimateTime;\n  }\n}\n\nclass TimeTableRow {\n  constructor(data) {\n    this.arrival = new TimeTableEvent(data.arrival);\n    this.departure = new TimeTableEvent(data.departure);\n\n    this.stationShortCode = data.arrival.stationShortCode || data.departure.stationShortCode;\n    this.commercialStop = data.arrival.commercialStop || data.departure.commercialStop;\n    this.commercialTrack = data.arrival.commercialTrack || data.departure.commercialTrack;\n    this.differenceInMinutes = data.arrival.differenceInMinutes || data.departure.differenceInMinutes;\n  }\n}\n\nclass Train {\n  constructor(data) {\n    this.trainNumber = data.trainNumber;\n    this.trainType = data.trainType;\n    this.trainName = `${this.trainType}${this.trainNumber}`;\n    this.runningCurrently = data.runningCurrently;\n\n    this.timeTableRows = this.getTimeTableRowObjects(data.timeTableRows);\n\n    this.fromStation = this.timeTableRows[0];\n    this.toStation = this.timeTableRows[this.timeTableRows.length - 1];\n\n    this.elementStatus = data.elementStatus;\n    this.currentStation = data.currentStation;\n  }\n\n  getTimeTableRowObjects(data) {\n    let groupedData = data.reduce((result, value, index, array) => {\n      if (index % 2 !== 0 && index > 0 && index < array.length - 1) {\n        result.push({arrival: array[index], departure: array[index + 1]});\n      }\n      else if (index === 0) {\n        result.push({arrival: {}, departure: array[index]});\n      }\n      else if (index === array.length - 1) {\n        result.push({arrival: array[index], departure: {}});\n      }\n\n      return result;\n    }, []);\n\n    return groupedData.map(row => new TimeTableRow(row));\n  }\n}\n\nconst API = {\n  // Rest API\n  getData: async (endpoint, callback) => {\n    try {\n      const response = await axios.get(`https://rata.digitraffic.fi/api/v1/${endpoint}`);\n      return response;\n    } catch (error) {\n      throw new Error(error);\n    }\n  },\n\n  getTrains: async (train_number, departure_date=\"latest\", version=0) => {\n    const response = await API.getData(`trains/${departure_date}/${train_number}?version=${version}`);\n    return new Train(response.data[0]);\n  },\n\n  getTracking: async (train_number, departure_date=\"latest\", version=0) => {\n    const response = await API.getData(`train-tracking/${departure_date}/${train_number}?version=${version}`)\n    return response.data[0];\n  },\n\n\n  // MQTT WebSocket\n  MQTT: {\n    client: new MQTT.Client(\"rata.digitraffic.fi\", 443, \"js-utility-WDL4i\"),\n\n    topics: [],\n\n    success: (res) => console.log(\"Connected: \", res),\n    failure: (err) => console.log(\"Error: \", err),\n\n    connectionLost: res => console.log(\"Connection lost: \", res),\n    messageArrived: msg => {\n      const parseTopic = (topic) => topic.split(\"/\");\n\n      const levelMatches = (level_a, level_b) =>\n        (level_a === \"+\" || level_a === \"#\") ? true : (level_a === level_b) ? true : false;\n\n      const topicMatches = (topic_a, topic_b) =>\n        topic_a.map((level, index) => levelMatches(level, topic_b[index]));\n\n\n      //console.log(API.MQTT.topics);\n\n      let messageTopic = parseTopic(msg.topic);\n      API.MQTT.topics.map(subscription => {\n        let subscriptionTopic = parseTopic(subscription.topic);\n        let matches = topicMatches(subscriptionTopic, messageTopic);\n        //console.log(\"MATCHES: \", matches.every(item => item === true), subscriptionTopic, messageTopic)\n        if (matches.every(item => item === true)) {\n          subscription.callback(msg);\n        }\n      });\n    },\n\n    connect: (callback) => {\n\n      try {\n        API.MQTT.client.connect({\n          timeout: 3,\n          keepAliveInterval: 60,\n          useSSL: true,\n          onSuccess: (res) => callback({success: true, res: res}),\n          onFailure: (res) => callback({success: false, res: res})\n        });\n\n        API.MQTT.client.onConnectionLost = API.MQTT.connectionLost;\n        API.MQTT.client.onMessageArrived = API.MQTT.messageArrived;\n      }\n      catch (error) {\n        console.log(error);\n      }\n    },\n\n    subscribeToTopic: (topic, callback) => {\n      API.MQTT.topics.push({topic: topic, callback: callback});\n      API.MQTT.client.subscribe(topic);\n    }\n\n\n  },\n\n  disconnect: async (callback) => {\n    await API.MQTT.client.disconnect();\n    callback();\n  },\n\n  subscribeToTrainUpdates: async (trainObject, callback) => {\n\n  }\n};\n\nexport {Train, API};\n","import React, {useContext} from 'react';\nimport \"./Header.scss\";\n\nimport {store} from \"../../../store.js\";\n\n\nconst Header = (props) => {\n  const applicationState = useContext(store);\n  const {state, dispatch} = applicationState;\n\n  return (\n    <div className=\"module header\">\n      <h1 className=\"application-title\">VR Tracking Tool <span className=\"version\">{`[${state.meta.majorVersion}.${state.meta.minorVersion} ${state.meta.releaseType}]`}</span></h1>\n      <nav>\n        <span className=\"nav-item current\"><a href=\"trains\">Trains</a></span>\n        <span className=\"nav-item\"><a href=\"stations\">Stations</a></span>\n        <span className=\"nav-item\"><a href=\"stations\">About</a></span>\n        <span className=\"nav-item\"><a href=\"stations\">News</a></span>\n      </nav>\n      <div className=\"description\">\n        <h2></h2>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport dateFormat from \"dateformat\";\n\nimport \"./TrainItem.scss\";\n\nconst formatTime = (date) => {\n  const timestampFormat = \"HH:MM\";\n  return (date) ? dateFormat(date, timestampFormat) : \"\";\n}\n\nconst TrainItem = (props) => {\n  const getTimeTableRow = (row) => (\n    <tr key={row.stationShortCode} className={`row ${row.commercialStop ? \"STOP\" : \"PASS\"} ${(row.stationShortCode === props.data.currentStation) ? \"currentStation\" : \"\"}`}>\n      <td className=\"stationShortCode\">{row.stationShortCode}</td>\n      <td className=\"commercialTrack\">{row.commercialTrack}</td>\n      <td className=\"departure\">{formatTime(row.departure.scheduledTime)}</td>\n      <td className=\"delay\">{row.differenceInMinutes}</td>\n      <td className=\"liveEstimateTime\">{formatTime(row.liveEstimateTime)}</td>\n    </tr>\n  );\n\n  const getTimeTableRows = (rows) =>\n    rows.map(row => getTimeTableRow(row));\n\n  return(\n    <div className={\"TrainItem \" + props.data.elementStatus}>\n      <div className=\"controls\">[X][↑][O]</div>\n      <div className=\"title\">{props.data.trainName}</div>\n      <div className=\"settings\">...</div>\n\n      <div className=\"o-d\">\n        <span className=\"startTime\">{`[${formatTime(props.data.fromStation.departure.scheduledTime)}] `}</span>\n        <span className=\"from\">{props.data.fromStation.stationShortCode}</span>\n        <span className=\"separator\"> → </span>\n        <span className=\"to\">{props.data.toStation.stationShortCode}</span>\n        <span className=\"endTime\">{` [${formatTime(props.data.toStation.arrival.scheduledTime)}]`}</span>\n      </div>\n\n      <div className=\"timetable\">\n        <table>\n          <thead>\n            <tr>\n              <th>Station</th>\n              <th>Track</th>\n              <th>Departure</th>\n              <th>Delay</th>\n              <th>Estimate</th>\n            </tr>\n          </thead>\n          <tbody>\n            {getTimeTableRows(props.data.timeTableRows)}\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"status\">{props.data.runningCurrently ? \"ONLINE\" : \"OFFLINE\"}</div>\n\n      <div className=\"info\"></div>\n    </div>\n  );\n}\n\nexport default TrainItem;\n","//Import all components\nimport Header from \"./Header/Header.js\";\nimport TrainView from \"./TrainView/TrainView.js\";\n\nconst Components = {\n  Header: Header,\n  TrainView: TrainView\n};\n\nexport default Components;\n","import React, {useContext} from 'react';\n\nimport {API, Train} from \"../../../API/API.js\";\nimport { store } from '../../../store.js';\n\nimport TrainItem from \"./TrainItem.js\";\n\nimport \"./TrainView.scss\";\n\nconst TrainView = (props) => {\n  const applicationState = useContext(store);\n  const {state, dispatch} = applicationState;\n\n  const createTrainItemElements = (trains) => {\n    let trainItemElements = [];\n\n    for (let train in trains) {\n      trainItemElements.push((<TrainItem key={trains[train].trainName} data={trains[train]} />));\n    }\n\n    return trainItemElements;\n  }\n\n  let identifier;\n  const updateIdentifier = (event) => {\n    identifier = event.target.value;\n  }\n\n  const createNewTrain = async () => {\n    const train = await API.getTrains(identifier);\n    dispatch({type: \"CREATE_TRAIN\", trainObject: train});\n\n    const tracking = await API.getTracking(identifier);\n    dispatch({type: \"TRACKING\", train: train.trainName, data: tracking});\n\n    API.MQTT.subscribeToTopic(`trains/+/${train.trainNumber}/#`, (msg) => {\n      //console.log(JSON.parse(msg.payloadString));\n      let newTrainObject = new Train(JSON.parse(msg.payloadString));\n      dispatch({type: \"UPDATE_TRAIN\", trainObject: newTrainObject});\n    });\n\n    API.MQTT.subscribeToTopic(`train-tracking/+/${train.trainNumber}/#`, (msg) =>\n      dispatch({type: \"TRACKING\", train: train.trainName, data: JSON.parse(msg.payloadString)})\n    );\n  }\n\n  return(\n    <div className=\"module TrainView\">\n      <input type=\"text\" placeholder=\"trainNumber\" onChange={updateIdentifier}/>\n      <input type=\"button\" onClick={createNewTrain} value=\"Create train\"></input>\n      <div className=\"trainList\">\n        {createTrainItemElements(state.trains)}\n      </div>\n    </div>\n  );\n}\n\nexport default TrainView;\n","import React, {useContext, useEffect} from 'react';\nimport './main.scss';\nimport {API} from \"./API/API.js\";\n\nimport {store} from \"./store.js\";\n\nimport Components from \"./UI/Components/Components.js\";\n\nfunction VrTrackingTool() {\n  const applicationState = useContext(store);\n  const {state, dispatch} = applicationState;\n\n  const connect_client = () => {\n    API.MQTT.connect((res) => {\n      if (res.success) {\n        dispatch({type: \"CONNECTION_SUCCESFULL\"});\n      } else {\n        dispatch({type: \"CONNECTION_FAILED\"});\n      }\n    });\n  }\n\n  const connect_application = () => {\n    if (!state.connected) {\n      API.MQTT.client.isConnected() ? dispatch({type: \"CONNECTION_SUCCESFULL\"}) : connect_client();\n    }\n  };\n\n  const init = () => {\n    connect_application();\n  }\n\n  // Run init only when loading app for the first time\n  useEffect(() => {\n    init();\n  }, []);\n\n  return (\n    <div className=\"vr-tracking-tool\">\n      <Components.Header />\n      <input type=\"button\" value=\"Connect\" onClick={connect_application} />\n      <input type=\"button\" value=\"Disconnect\" onClick={\n        () => API.disconnect(() => {dispatch({type: \"DISCONNECTED\"})})\n      } />\n      <Components.TrainView />\n    </div>\n  );\n}\n\nexport default VrTrackingTool;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n\nimport {DispatchProvider} from './store.js';\nimport VrTrackingTool from './VrTrackingTool';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<DispatchProvider><VrTrackingTool /></DispatchProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}